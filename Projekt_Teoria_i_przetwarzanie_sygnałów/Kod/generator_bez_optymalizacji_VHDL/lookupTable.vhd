-- -------------------------------------------------------------
-- 
-- File Name: hdlsrcx/lookupTable/lookupTable.vhd
-- Created: 2020-01-07 22:53:34
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.01
-- Target subsystem base rate: 0.01
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.01
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        0.01
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: lookupTable
-- Source Path: lookupTable
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.lookupTable_pkg.ALL;

ENTITY lookupTable IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END lookupTable;


ARCHITECTURE rtl OF lookupTable IS

  -- Component Declarations
  COMPONENT nfp_convert_fix_8_En0_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_mod_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT sys
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_convert_fix_8_En0_to_single
    USE ENTITY work.nfp_convert_fix_8_En0_to_single(rtl);

  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  FOR ALL : nfp_mod_single
    USE ENTITY work.nfp_mod_single(rtl);

  FOR ALL : sys
    USE ENTITY work.sys(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Counter_Limited_out1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch2_reg                  : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL delayMatch2_reg_next             : vector_of_std_logic_vector32(0 TO 5);  -- ufix32 [6]
  SIGNAL In1_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mod_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_lookupTable_nfp_convert_fix_8_En0_to_single : nfp_convert_fix_8_En0_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => std_logic_vector(Counter_Limited_out1),  -- uint8
              nfp_out => Data_Type_Conversion_out1  -- single
              );

  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Data_Type_Conversion_out1,  -- single
              nfp_in2 => In1_1,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_mod_comp : nfp_mod_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product_out1,  -- single
              nfp_in2 => Constant_out1,  -- single
              nfp_out => Mod_out1  -- single
              );

  u_sys : sys
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Mod_out1,  -- single
              Out1 => Out1  -- single
              );

  enb <= clk_enable;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 255
  Counter_Limited_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Limited_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Counter_Limited_out1 <= Counter_Limited_out1 + to_unsigned(16#01#, 8);
      END IF;
    END IF;
  END PROCESS Counter_Limited_process;


  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg(0) <= X"00000000";
      delayMatch2_reg(1) <= X"00000000";
      delayMatch2_reg(2) <= X"00000000";
      delayMatch2_reg(3) <= X"00000000";
      delayMatch2_reg(4) <= X"00000000";
      delayMatch2_reg(5) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  In1_1 <= delayMatch2_reg(5);
  delayMatch2_reg_next(0) <= In1;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);

  Constant_out1 <= X"43800000";

  ce_out <= clk_enable;

END rtl;

