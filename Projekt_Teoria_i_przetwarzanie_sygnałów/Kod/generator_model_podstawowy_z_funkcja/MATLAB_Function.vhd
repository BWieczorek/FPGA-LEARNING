-- -------------------------------------------------------------
-- 
-- File Name: testzzadanymfreq3/lookupTable/MATLAB_Function.vhd
-- Created: 2020-01-14 23:05:21
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: MATLAB_Function
-- Source Path: lookupTable/Triggered Subsystem/MATLAB Function
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.lookupTable_pkg.ALL;

ENTITY MATLAB_Function IS
  PORT( freq                              :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En8
        previous_index                    :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En8
        y                                 :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En17
        new_index                         :   OUT   std_logic_vector(18 DOWNTO 0)  -- ufix19_En8
        );
END MATLAB_Function;


ARCHITECTURE rtl OF MATLAB_Function IS

  -- Constants
  CONSTANT nc                             : vector_of_signed18(0 TO 255) := 
    (to_signed(16#00000#, 18), to_signed(16#0064F#, 18), to_signed(16#00C9C#, 18), to_signed(16#012E8#, 18),
     to_signed(16#01931#, 18), to_signed(16#01F76#, 18), to_signed(16#025B6#, 18), to_signed(16#02BF0#, 18),
     to_signed(16#03223#, 18), to_signed(16#0384E#, 18), to_signed(16#03E71#, 18), to_signed(16#0448A#, 18),
     to_signed(16#04A99#, 18), to_signed(16#0509B#, 18), to_signed(16#05692#, 18), to_signed(16#05C7A#, 18),
     to_signed(16#06255#, 18), to_signed(16#06820#, 18), to_signed(16#06DDB#, 18), to_signed(16#07385#, 18),
     to_signed(16#0791D#, 18), to_signed(16#07EA2#, 18), to_signed(16#08413#, 18), to_signed(16#08970#, 18),
     to_signed(16#08EB8#, 18), to_signed(16#093E9#, 18), to_signed(16#09903#, 18), to_signed(16#09E06#, 18),
     to_signed(16#0A2F0#, 18), to_signed(16#0A7C1#, 18), to_signed(16#0AC77#, 18), to_signed(16#0B113#, 18),
     to_signed(16#0B593#, 18), to_signed(16#0B9F8#, 18), to_signed(16#0BE3F#, 18), to_signed(16#0C268#, 18),
     to_signed(16#0C674#, 18), to_signed(16#0CA60#, 18), to_signed(16#0CE2D#, 18), to_signed(16#0D1DB#, 18),
     to_signed(16#0D567#, 18), to_signed(16#0D8D2#, 18), to_signed(16#0DC1C#, 18), to_signed(16#0DF43#, 18),
     to_signed(16#0E248#, 18), to_signed(16#0E529#, 18), to_signed(16#0E7E7#, 18), to_signed(16#0EA81#, 18),
     to_signed(16#0ECF7#, 18), to_signed(16#0EF47#, 18), to_signed(16#0F173#, 18), to_signed(16#0F378#, 18),
     to_signed(16#0F558#, 18), to_signed(16#0F712#, 18), to_signed(16#0F8A6#, 18), to_signed(16#0FA13#, 18),
     to_signed(16#0FB59#, 18), to_signed(16#0FC78#, 18), to_signed(16#0FD6F#, 18), to_signed(16#0FE40#, 18),
     to_signed(16#0FEE8#, 18), to_signed(16#0FF6A#, 18), to_signed(16#0FFC3#, 18), to_signed(16#0FFF5#, 18),
     to_signed(16#0FFFF#, 18), to_signed(16#0FFE1#, 18), to_signed(16#0FF9B#, 18), to_signed(16#0FF2E#, 18),
     to_signed(16#0FE99#, 18), to_signed(16#0FDDC#, 18), to_signed(16#0FCF8#, 18), to_signed(16#0FBED#, 18),
     to_signed(16#0FABB#, 18), to_signed(16#0F961#, 18), to_signed(16#0F7E1#, 18), to_signed(16#0F63A#, 18),
     to_signed(16#0F46D#, 18), to_signed(16#0F27A#, 18), to_signed(16#0F062#, 18), to_signed(16#0EE24#, 18),
     to_signed(16#0EBC0#, 18), to_signed(16#0E939#, 18), to_signed(16#0E68D#, 18), to_signed(16#0E3BD#, 18),
     to_signed(16#0E0CA#, 18), to_signed(16#0DDB4#, 18), to_signed(16#0DA7B#, 18), to_signed(16#0D721#, 18),
     to_signed(16#0D3A5#, 18), to_signed(16#0D008#, 18), to_signed(16#0CC4B#, 18), to_signed(16#0C86E#, 18),
     to_signed(16#0C472#, 18), to_signed(16#0C057#, 18), to_signed(16#0BC1F#, 18), to_signed(16#0B7C9#, 18),
     to_signed(16#0B357#, 18), to_signed(16#0AEC9#, 18), to_signed(16#0AA1F#, 18), to_signed(16#0A55C#, 18),
     to_signed(16#0A07E#, 18), to_signed(16#09B88#, 18), to_signed(16#09679#, 18), to_signed(16#09153#, 18),
     to_signed(16#08C17#, 18), to_signed(16#086C4#, 18), to_signed(16#0815D#, 18), to_signed(16#07BE2#, 18),
     to_signed(16#07653#, 18), to_signed(16#070B2#, 18), to_signed(16#06AFF#, 18), to_signed(16#0653C#, 18),
     to_signed(16#05F69#, 18), to_signed(16#05988#, 18), to_signed(16#05398#, 18), to_signed(16#04D9B#, 18),
     to_signed(16#04793#, 18), to_signed(16#0417F#, 18), to_signed(16#03B61#, 18), to_signed(16#0353A#, 18),
     to_signed(16#02F0A#, 18), to_signed(16#028D3#, 18), to_signed(16#02296#, 18), to_signed(16#01C54#, 18),
     to_signed(16#0160D#, 18), to_signed(16#00FC2#, 18), to_signed(16#00976#, 18), to_signed(16#00327#, 18),
     to_signed(-16#00327#, 18), to_signed(-16#00976#, 18), to_signed(-16#00FC2#, 18), to_signed(-16#0160D#, 18),
     to_signed(-16#01C54#, 18), to_signed(-16#02296#, 18), to_signed(-16#028D3#, 18), to_signed(-16#02F0A#, 18),
     to_signed(-16#0353A#, 18), to_signed(-16#03B61#, 18), to_signed(-16#0417F#, 18), to_signed(-16#04793#, 18),
     to_signed(-16#04D9B#, 18), to_signed(-16#05398#, 18), to_signed(-16#05988#, 18), to_signed(-16#05F69#, 18),
     to_signed(-16#0653C#, 18), to_signed(-16#06AFF#, 18), to_signed(-16#070B2#, 18), to_signed(-16#07653#, 18),
     to_signed(-16#07BE2#, 18), to_signed(-16#0815D#, 18), to_signed(-16#086C4#, 18), to_signed(-16#08C17#, 18),
     to_signed(-16#09153#, 18), to_signed(-16#09679#, 18), to_signed(-16#09B88#, 18), to_signed(-16#0A07E#, 18),
     to_signed(-16#0A55C#, 18), to_signed(-16#0AA1F#, 18), to_signed(-16#0AEC9#, 18), to_signed(-16#0B357#, 18),
     to_signed(-16#0B7C9#, 18), to_signed(-16#0BC1F#, 18), to_signed(-16#0C057#, 18), to_signed(-16#0C472#, 18),
     to_signed(-16#0C86E#, 18), to_signed(-16#0CC4B#, 18), to_signed(-16#0D008#, 18), to_signed(-16#0D3A5#, 18),
     to_signed(-16#0D721#, 18), to_signed(-16#0DA7B#, 18), to_signed(-16#0DDB4#, 18), to_signed(-16#0E0CA#, 18),
     to_signed(-16#0E3BD#, 18), to_signed(-16#0E68D#, 18), to_signed(-16#0E939#, 18), to_signed(-16#0EBC0#, 18),
     to_signed(-16#0EE24#, 18), to_signed(-16#0F062#, 18), to_signed(-16#0F27A#, 18), to_signed(-16#0F46D#, 18),
     to_signed(-16#0F63A#, 18), to_signed(-16#0F7E1#, 18), to_signed(-16#0F961#, 18), to_signed(-16#0FABB#, 18),
     to_signed(-16#0FBED#, 18), to_signed(-16#0FCF8#, 18), to_signed(-16#0FDDC#, 18), to_signed(-16#0FE99#, 18),
     to_signed(-16#0FF2E#, 18), to_signed(-16#0FF9B#, 18), to_signed(-16#0FFE1#, 18), to_signed(-16#0FFFF#, 18),
     to_signed(-16#0FFF5#, 18), to_signed(-16#0FFC3#, 18), to_signed(-16#0FF6A#, 18), to_signed(-16#0FEE8#, 18),
     to_signed(-16#0FE40#, 18), to_signed(-16#0FD6F#, 18), to_signed(-16#0FC78#, 18), to_signed(-16#0FB59#, 18),
     to_signed(-16#0FA13#, 18), to_signed(-16#0F8A6#, 18), to_signed(-16#0F712#, 18), to_signed(-16#0F558#, 18),
     to_signed(-16#0F378#, 18), to_signed(-16#0F173#, 18), to_signed(-16#0EF47#, 18), to_signed(-16#0ECF7#, 18),
     to_signed(-16#0EA81#, 18), to_signed(-16#0E7E7#, 18), to_signed(-16#0E529#, 18), to_signed(-16#0E248#, 18),
     to_signed(-16#0DF43#, 18), to_signed(-16#0DC1C#, 18), to_signed(-16#0D8D2#, 18), to_signed(-16#0D567#, 18),
     to_signed(-16#0D1DB#, 18), to_signed(-16#0CE2D#, 18), to_signed(-16#0CA60#, 18), to_signed(-16#0C674#, 18),
     to_signed(-16#0C268#, 18), to_signed(-16#0BE3F#, 18), to_signed(-16#0B9F8#, 18), to_signed(-16#0B593#, 18),
     to_signed(-16#0B113#, 18), to_signed(-16#0AC77#, 18), to_signed(-16#0A7C1#, 18), to_signed(-16#0A2F0#, 18),
     to_signed(-16#09E06#, 18), to_signed(-16#09903#, 18), to_signed(-16#093E9#, 18), to_signed(-16#08EB8#, 18),
     to_signed(-16#08970#, 18), to_signed(-16#08413#, 18), to_signed(-16#07EA2#, 18), to_signed(-16#0791D#, 18),
     to_signed(-16#07385#, 18), to_signed(-16#06DDB#, 18), to_signed(-16#06820#, 18), to_signed(-16#06255#, 18),
     to_signed(-16#05C7A#, 18), to_signed(-16#05692#, 18), to_signed(-16#0509B#, 18), to_signed(-16#04A99#, 18),
     to_signed(-16#0448A#, 18), to_signed(-16#03E71#, 18), to_signed(-16#0384E#, 18), to_signed(-16#03223#, 18),
     to_signed(-16#02BF0#, 18), to_signed(-16#025B6#, 18), to_signed(-16#01F76#, 18), to_signed(-16#01931#, 18),
     to_signed(-16#012E8#, 18), to_signed(-16#00C9C#, 18), to_signed(-16#0064F#, 18), to_signed(16#00000#, 18));  -- sfix18 [256]

  -- Signals
  SIGNAL freq_signed                      : signed(17 DOWNTO 0);  -- sfix18_En8
  SIGNAL previous_index_unsigned          : unsigned(17 DOWNTO 0);  -- ufix18_En8
  SIGNAL y_tmp                            : signed(17 DOWNTO 0);  -- sfix18_En17
  SIGNAL new_index_tmp                    : unsigned(18 DOWNTO 0);  -- ufix19_En8

BEGIN
  freq_signed <= signed(freq);

  previous_index_unsigned <= unsigned(previous_index);

  MATLAB_Function_1_output : PROCESS (freq_signed, previous_index_unsigned)
    VARIABLE new_index1 : unsigned(18 DOWNTO 0);
    VARIABLE sin_floor : signed(17 DOWNTO 0);
    VARIABLE sin_ceil : signed(17 DOWNTO 0);
    VARIABLE a : signed(18 DOWNTO 0);
    VARIABLE fiForTAggSI : unsigned(18 DOWNTO 0);
    VARIABLE fifortaggsi_0 : unsigned(18 DOWNTO 0);
    VARIABLE fifortaggsi_1 : unsigned(18 DOWNTO 0);
    VARIABLE y1 : unsigned(10 DOWNTO 0);
    VARIABLE y1_0 : unsigned(11 DOWNTO 0);
    VARIABLE t : unsigned(31 DOWNTO 0);
    VARIABLE t_0 : unsigned(31 DOWNTO 0);
    VARIABLE t_1 : unsigned(31 DOWNTO 0);
    VARIABLE t_2 : unsigned(31 DOWNTO 0);
    VARIABLE t_3 : unsigned(31 DOWNTO 0);
    VARIABLE t_4 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast : signed(19 DOWNTO 0);
    VARIABLE add_cast_0 : signed(19 DOWNTO 0);
    VARIABLE add_temp : signed(19 DOWNTO 0);
    VARIABLE sub_cast : signed(20 DOWNTO 0);
    VARIABLE sub_temp : signed(20 DOWNTO 0);
    VARIABLE cast : unsigned(63 DOWNTO 0);
    VARIABLE sub_temp_0 : unsigned(31 DOWNTO 0);
    VARIABLE cast_0 : unsigned(63 DOWNTO 0);
    VARIABLE sub_temp_1 : unsigned(31 DOWNTO 0);
    VARIABLE add_cast_1 : unsigned(19 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(19 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(31 DOWNTO 0);
    VARIABLE add_temp_1 : unsigned(11 DOWNTO 0);
    VARIABLE sub_cast_1 : signed(31 DOWNTO 0);
    VARIABLE add_temp_2 : unsigned(12 DOWNTO 0);
    VARIABLE sub_cast_2 : signed(31 DOWNTO 0);
    VARIABLE sub_cast_3 : signed(18 DOWNTO 0);
    VARIABLE sub_cast_4 : signed(18 DOWNTO 0);
    VARIABLE cast_1 : unsigned(63 DOWNTO 0);
    VARIABLE sub_temp_2 : unsigned(31 DOWNTO 0);
    VARIABLE cast_2 : signed(19 DOWNTO 0);
    VARIABLE mul_temp : signed(38 DOWNTO 0);
    VARIABLE add_cast_2 : signed(37 DOWNTO 0);
    VARIABLE add_cast_3 : signed(38 DOWNTO 0);
    VARIABLE add_cast_4 : signed(38 DOWNTO 0);
    VARIABLE add_temp_3 : signed(38 DOWNTO 0);
  BEGIN
    add_cast := signed(resize(previous_index_unsigned, 20));
    add_cast_0 := resize(freq_signed, 20);
    add_temp := add_cast + add_cast_0;
    IF add_temp(19) = '1' THEN 
      new_index1 := "0000000000000000000";
    ELSE 
      new_index1 := unsigned(add_temp(18 DOWNTO 0));
    END IF;
    IF new_index1 >= to_unsigned(16#10000#, 19) THEN 
      sub_cast := signed(resize(new_index1, 21));
      sub_temp := sub_cast - to_signed(16#010000#, 21);
      IF (sub_temp(20) = '0') AND (sub_temp(19) /= '0') THEN 
        new_index1 := "1111111111111111111";
      ELSIF sub_temp(20) = '1' THEN 
        new_index1 := "0000000000000000000";
      ELSE 
        new_index1 := unsigned(sub_temp(18 DOWNTO 0));
      END IF;
    END IF;
    t := resize(new_index1, 32) srl 8;
    cast := resize(t & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
    t_2 := cast(31 DOWNTO 0);
    sub_temp_0 := resize(new_index1, 32) - t_2;
    IF sub_temp_0(31 DOWNTO 19) /= "0000000000000" THEN 
      fiForTAggSI := "1111111111111111111";
    ELSE 
      fiForTAggSI := sub_temp_0(18 DOWNTO 0);
    END IF;
    IF fiForTAggSI = to_unsigned(16#00000#, 19) THEN 
      t_0 := resize(new_index1, 32) srl 16;
      cast_0 := resize(t_0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
      t_4 := cast_0(31 DOWNTO 0);
      sub_temp_1 := resize(new_index1, 32) - t_4;
      IF sub_temp_1(31 DOWNTO 19) /= "0000000000000" THEN 
        fifortaggsi_0 := "1111111111111111111";
      ELSE 
        fifortaggsi_0 := sub_temp_1(18 DOWNTO 0);
      END IF;
      add_cast_1 := resize(fifortaggsi_0, 20);
      add_temp_0 := add_cast_1 + to_unsigned(16#00100#, 20);
      sub_cast_0 := signed(resize(add_temp_0(19 DOWNTO 8), 32));
      IF (nc(to_integer(sub_cast_0 - 1))(17) = '0') AND (nc(to_integer(sub_cast_0 - 1))(16) /= '0') THEN 
        y_tmp <= "011111111111111111";
      ELSIF (nc(to_integer(sub_cast_0 - 1))(17) = '1') AND (nc(to_integer(sub_cast_0 - 1))(16) /= '1') THEN 
        y_tmp <= "100000000000000000";
      ELSE 
        y_tmp <= nc(to_integer(sub_cast_0 - 1))(16 DOWNTO 0) & '0';
      END IF;
    ELSE 
      y1 := new_index1(18 DOWNTO 8);
      IF y1 = to_unsigned(16#0FF#, 11) THEN 
        y1_0 := to_unsigned(16#000#, 12);
      ELSE 
        y1_0 := (resize(new_index1(18 DOWNTO 8), 12)) + ('0' & (new_index1(7) OR new_index1(6) OR new_index1(5) OR new_index1(4) OR new_index1(3) OR new_index1(2) OR new_index1(1) OR new_index1(0)));
      END IF;
      add_temp_1 := resize(y1, 12) + to_unsigned(16#001#, 12);
      sub_cast_1 := signed(resize(add_temp_1, 32));
      sin_floor := nc(to_integer(sub_cast_1 - 1));
      add_temp_2 := resize(y1_0, 13) + to_unsigned(16#0001#, 13);
      sub_cast_2 := signed(resize(add_temp_2, 32));
      sin_ceil := nc(to_integer(sub_cast_2 - 1));
      sub_cast_3 := resize(sin_ceil, 19);
      sub_cast_4 := resize(sin_floor, 19);
      a := sub_cast_3 - sub_cast_4;
      t_1 := resize(new_index1, 32) srl 8;
      cast_1 := resize(t_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
      t_3 := cast_1(31 DOWNTO 0);
      sub_temp_2 := resize(new_index1, 32) - t_3;
      IF sub_temp_2(31 DOWNTO 19) /= "0000000000000" THEN 
        fifortaggsi_1 := "1111111111111111111";
      ELSE 
        fifortaggsi_1 := sub_temp_2(18 DOWNTO 0);
      END IF;
      cast_2 := signed(resize(fifortaggsi_1, 20));
      mul_temp := a * cast_2;
      IF (mul_temp(38) = '0') AND (mul_temp(37) /= '0') THEN 
        add_cast_2 := "01111111111111111111111111111111111111";
      ELSIF (mul_temp(38) = '1') AND (mul_temp(37) /= '1') THEN 
        add_cast_2 := "10000000000000000000000000000000000000";
      ELSE 
        add_cast_2 := mul_temp(37 DOWNTO 0);
      END IF;
      add_cast_3 := resize(add_cast_2, 39);
      add_cast_4 := resize(sin_floor & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
      add_temp_3 := add_cast_3 + add_cast_4;
      IF ((add_temp_3(38) = '0') AND (add_temp_3(37 DOWNTO 24) /= "00000000000000")) OR ((add_temp_3(38) = '0') AND (add_temp_3(24 DOWNTO 7) = "011111111111111111")) THEN 
        y_tmp <= "011111111111111111";
      ELSIF (add_temp_3(38) = '1') AND (add_temp_3(37 DOWNTO 24) /= "11111111111111") THEN 
        y_tmp <= "100000000000000000";
      ELSE 
        y_tmp <= add_temp_3(24 DOWNTO 7) + ('0' & add_temp_3(6));
      END IF;
    END IF;
    new_index_tmp <= new_index1;
  END PROCESS MATLAB_Function_1_output;


  y <= std_logic_vector(y_tmp);

  new_index <= std_logic_vector(new_index_tmp);

END rtl;

